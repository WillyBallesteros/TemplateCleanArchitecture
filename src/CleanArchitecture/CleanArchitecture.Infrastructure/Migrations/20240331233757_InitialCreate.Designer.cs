// <auto-generated />
using System;
using CleanArchitecture.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240331233757_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Domain.Rents.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CancelationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelation_date");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_date");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmation_date");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DenialDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("denial_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_rentals");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_rentals_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_rentals_vehicle_id");

                    b.ToTable("rentals", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid")
                        .HasColumnName("vehicle_id");

                    b.HasKey("Id")
                        .HasName("pk_reviews");

                    b.HasIndex("RentId")
                        .HasDatabaseName("ix_reviews_rent_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_reviews_user_id");

                    b.HasIndex("VehicleId")
                        .HasDatabaseName("ix_reviews_vehicle_id");

                    b.ToTable("reviews", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("email");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int[]>("Accesories")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("accesories");

                    b.Property<DateTime?>("LastRentingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_renting_date");

                    b.Property<string>("Model")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("model");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.Property<string>("Vin")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("vin");

                    b.HasKey("Id")
                        .HasName("pk_vehicles");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Rents.Rent", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_user_user_id");

                    b.HasOne("CleanArchitecture.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_vehicle_vehicle_id");

                    b.OwnsOne("CleanArchitecture.Domain.Rents.DateRange", "Duration", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("duration_end");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("duration_start");

                            b1.HasKey("RentId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "Accesories", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("accesories_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("accesories_currency_type");

                            b1.HasKey("RentId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "Maintenance", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenance_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenance_currency_type");

                            b1.HasKey("RentId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "PricePerPeriod", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_per_period_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_per_period_currency_type");

                            b1.HasKey("RentId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "TotalPrice", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("total_price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("total_price_currency_type");

                            b1.HasKey("RentId");

                            b1.ToTable("rentals");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rentals_rentals_id");
                        });

                    b.Navigation("Accesories");

                    b.Navigation("Duration");

                    b.Navigation("Maintenance");

                    b.Navigation("PricePerPeriod");

                    b.Navigation("TotalPrice");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Reviews.Review", b =>
                {
                    b.HasOne("CleanArchitecture.Domain.Rents.Rent", null)
                        .WithMany()
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_rentals_rent_id");

                    b.HasOne("CleanArchitecture.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_user_user_id");

                    b.HasOne("CleanArchitecture.Domain.Vehicles.Vehicle", null)
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviews_vehicle_vehicle_id");
                });

            modelBuilder.Entity("CleanArchitecture.Domain.Vehicles.Vehicle", b =>
                {
                    b.OwnsOne("CleanArchitecture.Domain.Vehicles.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_country");

                            b1.Property<string>("Department")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_department");

                            b1.Property<string>("Neighborhood")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_neighborhood");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_street");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "Maintenaince", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("maintenaince_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("maintenaince_currency_type");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.OwnsOne("CleanArchitecture.Domain.Shared.Currency", "Price", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_amount");

                            b1.Property<string>("CurrencyType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_currency_type");

                            b1.HasKey("VehicleId");

                            b1.ToTable("vehicles");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId")
                                .HasConstraintName("fk_vehicles_vehicles_id");
                        });

                    b.Navigation("Address");

                    b.Navigation("Maintenaince");

                    b.Navigation("Price");
                });
#pragma warning restore 612, 618
        }
    }
}
